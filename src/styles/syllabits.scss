@import 'variables.scss';
/* Font faces */
@import 'https://fonts.googleapis.com/css?family=Open+Sans';
@import 'dovestype.scss';
/* Make sure to import buefy/bulma after declaring variables */
@import '~bulma';
@import '~buefy/src/scss/buefy';
@import '~@mdi/font/css/materialdesignicons.min.css';
/* Animations */
@import 'animations.scss';

/*
 * TYPOGRAPHY
 */

body {
    font-family: var(--font-simple);
    font-size: var(--fs-10);
}

.label {
    color: $dark;
    font-weight: 100;
    font-size: var(--fs-10);
}

.title {
    font-family: var(--font-stylized);
    font-size: var(--fs-30);
}

.subtitle {
    font-family: var(--font-stylized);
    color: $gray;
    font-size: var(--fs-10);
}

.branding {
    font-family: var(--font-stylized);
    font-size: var(--fs-50);
}

/*
 * LAYOUT
 */
html,
body {
    @extend .full-height
}

.table, table {
    td { vertical-align: middle; white-space: nowrap; }
}

.column-grow {
    width: 100%;
}

.column-shrink {
    width: 0.1%;
}

.scene {

    display: flex;
    flex-grow: 1;
    flex-direction: column;
    align-items: stretch;
    min-height: 0;
    position: relative;

    .static-area {
        position: relative;
        .static-item { position: absolute; }
    }

    .scroll-area {
        min-height: 0;
        flex-grow: 1;
        display: flex;
        flex-direction: column;

        &>* {
            position: relative;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
    }

    .background-area {

        position: absolute;
        top: 0; left: 0; bottom: 0; right: 0;
        overflow: hidden;

        &>* {
            position: absolute;
            top: 0; left: 0; bottom: 0; right: 0;
        }

    }
    
    .content-area {
        z-index: 5;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    &.is-centered .content-area {
        justify-content: center;
    }

    &:not(.is-centered) .content-area {
        &>* { flex-grow: 1; }
    }

    // TODO Make naming more consistent
    &.is-aligned .content-area {
        align-items: center;
    }

    &.has-scroll .scroll-area {
        overflow-y: scroll;
    }

    // On small screens, disable the background and allow the content to take up entire screen
    @include touch {
        .background-area { visibility: hidden; }
    }

    // On larger screens, (where the background is enabled), we make sure to apply a "foreground"
    // effect to the actual content.
    @include desktop {
        .scene-content {
            box-shadow: $heavy-shadow;
            background-color: $white;
            padding: 2em;
        }
    }

}

.splash {
    @extend .scene-content;

    position: relative;
    flex-grow: 1;
    display: flex;
    flex-direction: row;
    justify-content: center;
    gap: 4em;
    padding-top: 4em !important; padding-right: 4em !important; padding-left: 4em !important;
    padding-bottom: 6em !important;

    .splash-buttons {
        min-width: 15vw;
    }

    .splash-logo {
        width: 16em;
        margin-top: auto;
        margin-bottom: auto;
    }

    .splash-logo-footer {
        margin: 1em;
        position: absolute;
        left: 0;
        bottom: 0;
        height: 3em;
    }

    // With small screens, present pages in column orientation
    @include touch {
        align-self: stretch;
        flex-direction: column;
        align-items: center;
    }

    // With larger screens, limit splash size
    @include desktop {
        max-height: 35em;
    }

}

.demo-poem {
    display: flex;
    flex-direction: column;
    font-size: var(--fs-10);
    gap: 1em;

    .poem-text {
        font-style: italic;
        color: $gray;
    }
}

.login-menu, .register-menu {
    @extend .scene-content;

    display: flex;
    flex-direction: column;
    min-width: 30vw;
    min-height: 50vh;
    gap: 1em;

    .logo {
        width: 16em;
        align-self: center;
        justify-self: center;
        margin-top: auto;
        margin-bottom: auto;
    }

    form {
        display: flex;
        flex-direction: column;
        margin-top: auto;
    }

}

.dashboard {
    display: grid;
    grid-template-columns: repeat(3, auto);
    gap: 1em;
    margin: 1em;
    // On smaller screens, only use one column
    @include touch {
        grid-template-columns: auto;
    }
}

.app {
    @extend .full-height;
    position: relative;
    .app-content {
        position: absolute;
        top: 0; left: 0; bottom: 0; right: 0;
    }
}

.gameboard {

    @extend .scene-content;
    width: min(70em, 100vw);
    display: flex;
    flex-direction: column;

    .poem-body {
        min-width: 80%;
        display: flex;
        flex-direction: column;
    }

    // We insert space between each line using margin-top.
    // This allows us to animate adding/removing stanza breaks.
    .poem-line {

        &:not(:first-child) { margin-top: 1.5em; }
        &.has-stanza-break { margin-top: 6em; }
        transition: all 1s ease;

        font-size: var(--fs-20);
    
    }

    .poem-categories {
        width: min(90vw, 30em);
        .taginput-container {
            @extend .borderless;
        }
    }

}

.page-view {
    @extend .scene-content;
    width: min(70em, 100vw);
    padding: 3em !important;
    display: flex;
    flex-direction: column;
}

/*
 * COMPONENTS
 */

button,
.button {
    font-size: var(--fs-10);
    // Fix for buttons with hints attached
    display: inline-flex;
    .icon {
        margin-left: calc(-0.5em - 1px) !important;
        margin-right: calc(-0.5em - 1px) !important;
    }
}

.b-tabs {
    @extend .vertical-grow;
    .tabs>ul { justify-content: center; }
    .tab-content { @extend .vertical-grow; }
}

.role-tag {
    color: $white !important;
    @each $role, $color in $role-colors {
        &.is-role-#{$role} {
            background-color: $color;
        }
    }
}

input,
.input {
    &.is-resizable {
        width: auto;
        box-sizing: content-box;
        padding-top: 0; padding-bottom: 0;
        transition: all 0.2s ease;
        right: 0;
    }
}

.background-image {
    &.stretched {
        background-size: cover;
    }
}

.game-block-shape {
    width: $block-width;
    height: $block-height;
}

.game-block {

    @extend .game-block-shape;

    // Color
    @each $type, $color in $block-colors {
        &.is-type-#{$type} {
            background-color: $color;
        }
    }

    display: flex;
    align-items: center;
    justify-content: space-around;
    padding: 0.5em;
    border-radius: 0.5em;
    cursor: move;

    &.ghost {
        transition: transform 0.18s ease;
        transform: rotateZ(5deg)
    }

    &.ghost-drop {
        transition: transform 0.18s ease-in-out;
        transform: rotateZ(0deg)
    }

}

.user-entry {
    .user-entry-role {
        margin-right: auto;
    }
}

.game-slot {

    @extend .game-block-shape;

    position: relative;

    &.incorrect-active {
        animation: jiggle 0.5s;
    }

    &.correct-active {
        animation: bounce 0.4s;
    }

    &.is-mode-slot.drop-active .game-blank {
        fill: $lighter;
        animation: ants 3s linear 0s infinite normal forwards;
    }

    &:not(.is-mode-slot) .game-blank {
        visibility: hidden;
    }

    &.is-disabled .game-blank {
        fill: $lightest;
    }

    &.drop-active:not(.drag-active) .game-block {
        transition: opacity 0.25s ease;
        opacity: 0.0;
    }

}

.game-blank {
    width: calc($block-width - (2 * $blank-stroke-width));
    height: calc($block-height - (2 * $blank-stroke-width));

    fill: none;
    pointer-events: all;
    stroke: $light;
    stroke-dasharray: $blank-stroke-dasharray;
    stroke-width: $blank-stroke-width;

    transition: fill 1s ease;
}

.game-notation {
    @extend .non-interactive;
    max-height: $notation-size;
    max-width: $notation-size;
}

.game-feedback {

    @extend .non-interactive;

    font-size: var(--fs-10);
    border-radius: 9999px;
    padding-left: 1em;
    padding-right: 1em;
    padding-top: 0.5em;
    padding-bottom: 0.5em;
    color: $white;
    white-space: nowrap;

    animation: spring 5s ease;

    @each $type, $color in $feedback-colors {
        &.is-type-#{$type} {
            background-color: $color;
        }
    }

}

.game-progress {

    height: 2.25em;
    background-color: $light;
    position: relative;

    &>* {
        position: absolute;
    }

    &.is-small {
        height: 1em;
    }

    .inner {
        width: calc(var(--progress) * 100%);
        height: 100%;
        background-color: $dark;
        transition: width 1.5s ease;
    }

    &.is-rounded, &.is-rounded .inner {
        border-radius: 9999px;
    }
    
    @each $name, $components in $colors {
        &.is-#{$name} {
            .inner { background-color: nth($components, 1); }
        }
    }

}

.block-picker {
    display: grid;
    gap: 8px;
    grid-template-columns: repeat(1, 1fr);
    font-size: var(--fs-20);
}

.dropdown-content {
    box-shadow: 0 .5em 1em -.125em hsla(0,0%,4%,.1),0 0 0 1px hsla(0,0%,4%,.02);
    text-align: left;
}

.hint {

    position: absolute;
    width: max-content;
    display: inline-flex;
    z-index: $z-index-note;
    white-space: pre-wrap;
    text-align: start;
    padding: 0.35em 0.75em;
    gap: 1em;
    border-radius: 0.4em;
    font-size: var(--fs-20);
    box-shadow: $heavy-shadow;

    &.is-top {
        left: 50%; top: auto; right: auto; bottom: 100%;
        transform: translateX(-50%);
        &::before {
            top: calc(100% - 5px); left: 50%; right: auto; bottom: auto;
            transform: translateX(-50%) rotate(45deg);
        }
    }

    &.is-bottom {
        left: 50%; bottom: auto; right: auto; top: 100%;
        transform: translateX(-50%);
        &::before {
            bottom: calc(100% - 5px); left: 50%; right: auto; top: auto;
            transform: translateX(-50%) rotate(45deg);
        }
    }

    &.is-left {
        top: 50%; left: auto; bottom: auto; right: 100%;
        transform: translateY(-50%);
        &::before {
            left: calc(100% - 5px); top: 50%; right: auto; bottom: auto;
            transform: translateY(-50%) rotate(45deg);
        }
    }

    &.is-right {
        top: 50%; right: auto; bottom: auto; left: 100%;
        transform: translateY(-50%);
        &::before {
            right: calc(100% - 5px); top: 50%; left: auto; bottom: auto;
            transform: translateY(-50%) rotate(45deg);
        }
    }

    &.is-horizontal {
        align-items: center;
    }

    @each $name, $components in $colors {
        &.is-#{$name} {
            background-color: nth($components, 1);
            color: nth($components, 2);
        }
    }

    &::before {
        position: absolute;
        background-color: inherit;
        content: "";
        pointer-events: none;
        width: 10px; height: 10px;
    }

}

.hint-container {
    position: relative;
}

.field {
    &.is-grouped, &.is-expanded {
        flex-basis: 0;
    }
}

.game-dropdown {

    box-shadow: $heavy-shadow;
    display: flex;
    flex-direction: column;
    align-items: center;

    background-color: $white;
    border-top: none;
    border-radius: 16px;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
    transition: transform 1s ease;

    .inner {
        align-self: stretch;
        padding: 1em;
    }

    .handle {
        transition: transform 1s ease;
    }

    &.open .handle {
        transform: scale(1, -1);
    }

    &:not(.open) {

        transform: translate(0, calc(-100% - 1em));

        &.has-handle {
            transform: translate(0, calc(-100% + var(--fs-40)));
        }

    }

}

.block-dropdown {
    @extend .static-item;
    top: 0em;
    left: 1em;
    z-index: $z-index-block-dropdown;
}

.progress-dropdown {
    @extend .static-item;
    @extend .non-interactive;
    top: 0em;
    left: 50%;
    transform: translate(-50%, 0);
    width: min(100vw, 40em);
    z-index: $z-index-progress-dropdown;
}

.save-dropdown {
    @extend .static-item;
    top: 0em;
    left: 50%;
    transform: translate(-50%, 10%);
    z-index: $z-index-progress-dropdown;
}

.toolbar {
    display: flex;
    align-items: center;
    .toolbar-start { margin-right: auto; }
    .toolbar-end { margin-left: auto; }
    &>* {
        display: flex;
        gap: 1em;
    }
}

.navbar {
    box-shadow: $shadow;
    z-index: 20;
}

.divider {
    @extend .non-interactive;
    opacity: 0.15;
}

.poem-line {

    display: flex;
    align-items: center;
    gap: 1em;

    .number {
        justify-self: start;
        color: $light;
        background-color: $lighter;
        transition: color 1s ease;
        transition: background-color 1s ease;
    }

    &.is-state-correct .number {
        background-color: $success;
        color: $success-invert;
    }

    &.is-state-incorrect .number {
        background-color: $danger;
        color: $danger-invert;
    }

    .poem-text {
        font-family: var(--font-stylized);
        letter-spacing: 0.04em;
        transition: color 1s ease;
    }

    &.is-disabled .poem-text {
        color: $light;
    }

    .feedback-area {
        margin-left: auto;
        width: $feedback-area-width;
        height: $feedback-area-height;
        // TODO Responsiveness

        // Since multiple elements can exist in the feedback area simultaneously, we take an
        // absolute/relative positioning approach. We use the child selector to center the child elements.
        position: relative;

        &>* {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

    }

    .actions {
        margin-left: auto;
    }

    .check-button {
        border-radius: 9999px;
        animation: pulse 2s infinite;
    }

}

.number {
    @extend .non-interactive;
    font-size: var(--fs-10);
}

.notices {
    white-space: pre-wrap;
}

.poem-card {
    
    display: flex;
    flex-direction: column;
    transition: transform 0.25s, box-shadow 0.25s;
    box-shadow: $shadow;
    cursor: pointer;
    font-family: var(--font-stylized);

    .poem-card-content {
        padding: 1em;
    }

    &:hover {
        box-shadow: $heavy-shadow;
        transform: translate(0, -0.5em);
    }

}

.modal-simple {

    box-shadow: $heavy-shadow;
    background-color: $white;
    padding: 2em;
    position: relative;
    min-width: 30vw;
    min-height: 30vh;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 2em;

    .modal-simple-title {
        font-size: var(--fs-40);
        font-family: var(--font-stylized);
    }

    .modal-simple-foot {
        display: flex;
        gap: 1em;
    }

}

.submenu {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
    &.is-centered {
        align-items: center;
    }
    &.is-aligned-start {
        align-items: flex-start;
    }
    &.is-aligned-end {
        align-items: flex-end;
    }
    .submenu-footer {
        margin-top: 1em;
        display: flex;
        gap: 2em;
    }
}

/*
 * UTILITY
 */

// Filter
.muted {
    filter: contrast(70%) blur(6px);
    margin: -15px;
}

.semi-muted {
    filter: contrast(50%) blur(3px);
    margin: -8px;
}

.full-height {
    height: 100%;
}

// TODO Integrate with submenu
.vertical-grow {
    min-height: 0;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}

.align-self-start {
    align-self: flex-start;
}

.align-self-end {
    align-self: flex-end;
}

.align-self-center {
    align-self: center;
}

@for $n from 0 to 6 {
    .gap-#{$n} {
        gap: #{$n}rem;
    }
}

.non-interactive {
    pointer-events: none;
    user-select: none;
}

.grouping {
    display: contents;
}

.borderless {
    background-color: transparent !important;
    border-color: transparent !important;
    box-shadow: none !important;
}

.no-overflow {
    overflow-y: hidden;
}

.extended-input {
    width: min(100vw, 20em);
}

html {
    -ms-overflow-style: none;
    /* for Internet Explorer, Edge */
    scrollbar-width: none;
    /* for firefox */
}