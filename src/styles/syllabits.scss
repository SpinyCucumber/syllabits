@import 'variables.scss';
/* Font faces */
@import 'https://fonts.googleapis.com/css?family=Open+Sans';
@import 'dovestype.scss';
/* Make sure to import buefy/bulma after declaring variables */
@import '~bulma';
@import '~buefy/src/scss/buefy';
@import '~@mdi/font/css/materialdesignicons.min.css';
/* Animations */
@import 'animations.scss';

/*
 * TYPOGRAPHY
 */

body {
    font-family: $font-primary;
    font-size: var(--medium);
}

.number {
    font-family: $font-secondary;
}

.title {
    font-size: var(--larger);
}

.subtitle {
    color: $gray;
    font-size: var(--medium);
}

/*
 * LAYOUT
 */

 #app,
 html,
 body,
 #app>* {
     @extend .full-height
 }

 .reader {

    display: flex;
    flex-grow: 1;
    flex-direction: column;
    align-items: stretch;
    min-height: 0;
    position: relative;

    .static-area {

        position: relative;

        &>* {
            position: absolute;
        }

    }

    .scroll-area {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        min-height: 0;
        overflow-y: scroll;
    }

    .background {

        display: flex;
        flex-grow: 1;
        flex-direction: column;
        align-items: center;
        position: relative;

        &:before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: -1;
            filter: saturate(450%) hue-rotate(-15deg) contrast(30%) blur(2px);
            background-image: url('textures/Paper2.png');
            background-repeat: repeat;
        }

    }

    .content-area {
        display: flex;
        flex-direction: column;
        background-color: white;
    }

 }

.main {

    display: flex;
    flex-direction: column;

    &>.inner {
        flex-grow: 1;
    }

}

.poem {

    display: flex;
    flex-grow: 1;
    width: min(70em, 100vw);
    flex-direction: column;
    align-items: center;
    gap: 3em;
    padding-left: 2vw;
    padding-right: 2vw;
    padding-top: 3em;
    padding-bottom: 3em;

    .title-box {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .body {
        min-width: 80%;
        display: grid;
        align-items: center;
        grid-row-gap: 1.5em;
        grid-template-columns: auto auto auto;
        // With small screens, use a grid with only two columns
        @include mobile {
            grid-template-columns: auto auto;
        }
    }

    .stanza {
        display: contents;
        // We insert a pseudo-element "spacer" between each stanza
        // to create space.
        &:not(:last-child):after {
            content: '';
            // Span entire row
            grid-column: 1/-1;
            height: 4em;
        }
    }

}

/*
 * COMPONENTS
 */

button, .button {
    font-size: var(--medium);
    font-family: $font-secondary;
}

.input {
    font-family: $font-secondary;
}

.game-block-shape {
    width: $block-width;
    height: $block-height;
    font-size: var(--large);
}

.game-block {

    @extend .game-block-shape;

    display: flex;
    align-items: center;
    justify-content: space-around;
    padding: 0.5em;
    border-radius: 0.5em;
    cursor: move;

    &.ghost {
        transition: transform 0.18s ease;
        transform: rotateZ(5deg)
    }

    &.ghost-drop {
        transition: transform 0.18s ease-in-out;
        transform: rotateZ(0deg)
    }

}

.game-slot {

    @extend .game-block-shape;

    position: relative;

    &.incorrect-active {
        animation: jiggle 0.5s;
    }
    
    &.correct-active {
        animation: bounce 0.4s;
    }
    
    &.slot.drop-active .game-blank {
        fill: $lighter;
        animation: ants 3s linear 0s infinite normal forwards;
    }

    &:not(.slot) .game-blank {
        visibility: hidden;
    }

    &.drop-active:not(.drag-active) .game-block {
        transition: opacity 0.25s ease;
        opacity: 0%;
    }

}

.game-blank {
    width: calc($block-width - (2 * $blank-stroke-width));
    height: calc($block-height - (2 * $blank-stroke-width));

    fill: none;
    pointer-events: all;
    stroke: $light;
    stroke-dasharray: $blank-stroke-dasharray;
    stroke-width: $blank-stroke-width;
}

.game-notation {
    @extend .non-interactive;
    max-height: $notation-size;
    max-width: $notation-size;
}

.game-feedback {

    @extend .non-interactive;

    font-family: $font-secondary;
    font-size: var(--medium);

    border-radius: 9999px;
    padding-left: 1em;
    padding-right: 1em;
    padding-top: 0.5em;
    padding-bottom: 0.5em;
    color: white;
    white-space: nowrap;

    animation: spring 5s ease;

    &.perfect {
        background-color: #45ba45;
    }

    &.great {
        background-color: #7845ba;
    }

    &.good {
        background-color: #c9a919;
    }

    &.okay {
        background-color: #2e81e0;
    }

    &.incorrect {
        background-color: #ba4545;
    }

}

.game-progress {

    height: 2em;
    width: min(40em, 90vw);
    background-color: $light;
    border-radius: 9999px;
    display: flex;
    top: 0;
    left: 50%;

    .inner {
        background-color: $dark;
        border-radius: 9999px;
        transition: width 3s ease;
    }

} 

.block-picker {
    display: grid;
    gap: 8px;
    grid-template-columns: repeat(1, 1fr);
}

.game-dropdown {

    @extend .has-shadow;
    display: flex;
    flex-direction: column;
    align-items: center;
    
    background-color: white;
    border-top: none;
    border-radius: 16px;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
    transition: transform 1s ease;

    .inner {
        padding: 1em;
    }

    .handle {
        background-color: transparent;
        background-repeat: no-repeat;
        border: none;
        cursor: pointer;
        overflow: hidden;
        outline: none;
        transition: transform 1s ease;
        // Select children (e.g. icons)
        &>* {
            font-size: var(--icon);
            display: contents;
        }
    }

    &.open .handle {
        transform: scale(1,-1);
    }

    &:not(.open) {

        transform: translate(0, calc(-100% - 1em));

        &.has-handle {
            transform: translate(0, calc(-100% + var(--icon)));
        }

    }

}

.block-dropdown {
    top: 0em;
    left: 1em;
    z-index: $z-index-block-dropdown;
}

.progress-dropdown {
    @extend .non-interactive;
    top: 0em;
    left: 50%;
    transform: translate(-50%, 0);
    z-index: $z-index-progress-dropdown;
}

.navbar {
    @extend .has-shadow;
    z-index: 20;
}

.divider {
    @extend .non-interactive;
    opacity: 10%;
}

.line {

    display: contents;

    .number {
        justify-self: start;
        color: $light;
        background-color: $lighter;
        transition: color 1s ease;
        transition: background-color 1s ease;
    }

    &.correct .number {
        color: white;
        background-color: #45ba45;
    }

    &.incorrect .number {
        color: white;
        background-color: #ba4545;;
    }

    // This element contains the slot container as well as the line text.
    .text-box {
        display: flex;
        width: fit-content;
        justify-self: start;
        flex-direction: column;
        gap: 0.5em;
    }

    .slot-container {
        display: flex;
        justify-content: space-between;
    }

    .text {
        font-size: var(--large);
        letter-spacing: 0.04em;
    }

    .feedback-area {
        justify-self: end;
        width:  $feedback-area-width;
        height: $feedback-area-height;

        // With smaller screens, we are working with two columns instead of three.
        // We let the feedback occupy the entire next row if screen is small.
        // When the feedback area is empty on smaller screens, we "hide" it.
        // When an element appears, we transition the height to make the element "slide in."
        @include mobile {
            height: 0;
            justify-self: center;
            // Span entire row
            grid-column: 1/-1;
            transition: height 1s ease;

            &:not(:empty) {
                height: $feedback-area-height;
            }
        }

        // Since multiple elements can exist in the feedback area simultaneously, we take an
        // absolute/relative positioning approach. We use the child selector to center the child elements.
        position: relative;
        &>* {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

    }

    .check-button {
        border-radius: 9999px;
        animation: pulse 2s infinite;
    }

}

.number {
    @extend .non-interactive;
    font-family: $font-secondary;
    font-size: var(--medium);
}

/*
 * UTILITY
 */

.has-shadow {
    box-shadow: 0px 0px 3px 3px #36363655;
}

 .full-height {
     height: 100%;
 }

.non-interactive {
    pointer-events: none;
    user-select: none;
}

html {
    -ms-overflow-style: none;
    /* for Internet Explorer, Edge */
    scrollbar-width: none;
    /* for firefox */
}